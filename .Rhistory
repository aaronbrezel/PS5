return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
startAndEnd <- c(1,5)
integrateIt(x,y, c(1,5), "Trap")
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
integrateIt(x,y, c(1,5), "Trap")
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
#newObject <- new("Trapazoid", x = x, y = y, integral = integral)
return(integral)
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
#newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(integral)
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
startAndEnd <- c(1,5)
integrateIt(x,y, c(1,5), "Trap")
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
#' An object of the class "Trapezoid" or "Simpsons" has the following slots:
#' \itemize{
#' \item \code{x} The vector of x values
#' \item \code{y} The vector of corresponding y values
#' \item \code{integral} The result of the integral calculation of the x and y vectors
#' }
#'
#' @author Aaron J. Brezel: \email{aaronbrezel@@wustl.edu}
#' @rdname TrapAndSimpsons
#' @export
setClass(Class="Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
integral = "numeric"
),
prototype = prototype(
x = c(),
y = c(),
integral = c()
)
)
#' @export
setClass(Class="Simpsons",
representation = representation(
x = "numeric",
y = "numeric",
integral = "numeric"
),
prototype = prototype(
x = c(),
y = c(),
integral = c()
)
)
#' @export
setMethod("initialize", "Trapezoid",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("initialize", "Simpsons",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setValidity("Trapezoid", function(object){
if(length(x) == 1){
return("Yo, you can't take an integral with one value")
}
else if(!identical(length(object@x), length(object@y))){ #x and y need to have an identical length to correspond correctly
return("Yo, vectors x and y must have identical lengths")
}
#else if(length(object@x) %% 2 != 0){
#  return("Yo, went doing a trapezoidal integration, x must have an even number of vectors")
#}
})
setValidity("Simpsons", function(object){
if(length(x) == 1){
return("Yo, you can't take an integral with one value")
}
else if(!identical(length(object@x), length(object@y))){ #x and y need to have an identical length to correspond correctly
return("Yo, vectors x and y must have identical lengths")
}
else if(length(object@x) %% 2 != 1){
return("Yo, went doing a simpsons integration, x must have an odd number of vectors")
}
})
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
newObject <- new("Trapazoid", x = x, y = y, integral = integral)
return(integral)
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
startAndEnd <- c(1,5)
integrateIt(x,y, c(1,5), "Trap")
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
newObject <- new("Trapezoid", x = x, y = y, integral = integral)
return(integral)
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
integrateIt(x,y, c(1,5), "Trap")
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
newObject <- new("Trapezoid", x = x, y = y, integral = integral)
return(list(newObject, XandY, integral))
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
integrateIt(x,y, c(1,5), "Trap")
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
newObject <- new("Trapezoid", x = x, y = y, integral = integral)
return(list(newObject, XandY, integral))
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
integrateIt(x,y, c(1,5), "Trap")
print(integrateIt(x,y, startAndEnd, "Trap"))
?cat
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
print(14)
cat <- 14
print(cat)
integrateIt(x = c(1,2,3,4,5), y = c(1,4,9,16,25), startAndEnd = c(1,5), rule = "Simpsons")
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
#Test code
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
startAndEnd <- c(1,5)
integrateIt(x,y, startAndEnd, "Trap")
integrateIt(x,y, startAndEnd, "Trap")
print(14)
print(14)
print.numeric_version(14)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/aaron/OneDrive/Documents/Applied Statistical Programming/PS5") #This will need to be changed to match your directory
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("C:/Users/aaron/OneDrive/Documents/Applied Statistical Programming/PS5") #This will need to be changed to match your directory
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
integrateIt <- function(x,y,startAndEnd, rule){
h <- (max(x) - min(x))/(length(x)-1)
XandY <- data.frame(x,y)
if(length(startAndEnd) != 2){# startAndEnd must only have two values as they are the start and end points of the integrals
return("Yo, your startAndEnd vector must only contain two values")
}
else if(startAndEnd[1] > startAndEnd[2]){# The first value of startAndEnd must be smaller than the second
return("Yo, the second value of startAndEnd must be larger than the first ")
}
else if(!is.element(startAndEnd[1],x) || !is.element(startAndEnd[2],x)){# Both values of startAndEnd must be within x
return("Yo, both values of startAndEnd must be included in x")
}
else if(identical(rule, "Trap")){
y[1] <- y[1]/2
y[length(y)] <- y[length(y)]/2
integral = sum(y)*h
newObject <- new("Trapezoid", x = x, y = y, integral = integral)
return(list(newObject, XandY, integral))
}
else if(identical(trapOrSimpsons, "Simpsons")){
newY <- y[-c(1, length(y))]
#creates indices of odd and even indices in newY
even_indices <- seq(2, length(newY), 2)
odd_indices <- seq(1, length(newY), 2)
2*newY[c(even_indices)]
4*newY[c(odd_indices)]
integral <- (h/3)*(sum(y[1], 4*newY[c(odd_indices)], 2*newY[c(even_indices)], y[length(y)]))
newObject <- new("Simpsons", x = x, y = y,integral = integral)
return(list(newObject, XandY, integral))
}
else{
return("rule must be a character string either 'Trap' or 'Simpsons'")
}
}
x <- c(1,2,3,4,5)
y <- c(1,4,9,16,25)
startAndEnd <- c(1,5)
integrateIt(x,y, c(1,5), "Trap")
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
## This can be run many times as the code is updates
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test(current.code)
poisson.lik <- function(lambda, y){
n <- nrow(y)
logl <- sum(y)*log(lambda)-n*lambda
return(logl)
}
y <- c(1,2,3,4)
lambda <- 2
poisson.lik(lambda, y)
poisson.lik <- function(lambda, y){
n <- nrow(y)
logl <- sum(y)*log(lambda)-n*lambda
return(-logl)
}
y <- c(1,2,3,4)
lambda <- 2
poisson.lik(lambda, y)
poisson.lik(lambda = lambda, y = y)
detach(integrateIt)
detach("integrateIt")
detach("package:integrateIt", unload = TRUE)
poisson.lik(lambda = lambda, y = y)
poisson.lik <- function(lambda, y){
n <- nrow(y)
logl <- sum(y)*log(lambda)-n*lambda
return(-logl)
}
y <- c(1,2,3,4)
lambda <- 2
poisson.lik(lambda = lambda, y = y)
